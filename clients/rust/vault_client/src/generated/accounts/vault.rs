//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! <https://github.com/kinobi-so/kinobi>

use borsh::{BorshDeserialize, BorshSerialize};
use solana_program::pubkey::Pubkey;

use crate::generated::types::DelegationState;

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct Vault {
    pub discriminator: u64,

    pub base: Pubkey,

    pub vrt_mint: Pubkey,

    pub supported_mint: Pubkey,
    pub vrt_supply: u64,
    pub tokens_deposited: u64,
    pub capacity: u64,
    pub delegation_state: DelegationState,
    pub vrt_enqueued_for_cooldown_amount: u64,
    pub vrt_cooling_down_amount: u64,
    pub vrt_ready_to_claim_amount: u64,

    pub admin: Pubkey,

    pub delegation_admin: Pubkey,

    pub operator_admin: Pubkey,

    pub ncn_admin: Pubkey,

    pub slasher_admin: Pubkey,

    pub capacity_admin: Pubkey,

    pub fee_admin: Pubkey,

    pub withdraw_admin: Pubkey,

    pub fee_wallet: Pubkey,

    pub mint_burn_admin: Pubkey,
    pub vault_index: u64,
    pub ncn_count: u64,
    pub operator_count: u64,
    pub slasher_count: u64,
    pub last_fee_change_slot: u64,
    pub last_full_state_update_slot: u64,
    pub deposit_fee_bps: u16,
    pub withdrawal_fee_bps: u16,
    pub reward_fee_bps: u16,
    pub bump: u8,
    pub reserved: [u8; 9],
}

impl Vault {
    #[inline(always)]
    pub fn from_bytes(data: &[u8]) -> Result<Self, std::io::Error> {
        let mut data = data;
        Self::deserialize(&mut data)
    }
}

impl<'a> TryFrom<&solana_program::account_info::AccountInfo<'a>> for Vault {
    type Error = std::io::Error;

    fn try_from(
        account_info: &solana_program::account_info::AccountInfo<'a>,
    ) -> Result<Self, Self::Error> {
        let mut data: &[u8] = &(*account_info.data).borrow();
        Self::deserialize(&mut data)
    }
}

#[cfg(feature = "anchor")]
impl anchor_lang::AccountDeserialize for Vault {
    fn try_deserialize_unchecked(buf: &mut &[u8]) -> anchor_lang::Result<Self> {
        Ok(Self::deserialize(buf)?)
    }
}

#[cfg(feature = "anchor")]
impl anchor_lang::AccountSerialize for Vault {}

#[cfg(feature = "anchor")]
impl anchor_lang::Owner for Vault {
    fn owner() -> Pubkey {
        crate::JITO_VAULT_ID
    }
}

#[cfg(feature = "anchor-idl-build")]
impl anchor_lang::IdlBuild for Vault {}

#[cfg(feature = "anchor-idl-build")]
impl anchor_lang::Discriminator for Vault {
    const DISCRIMINATOR: [u8; 8] = [0; 8];
}
